# fts : Full-Time Stock
# base data로 활용하기 위한 2000년 이후 한국시장 전체 주가 데이터 수집 코드입니다.
# 실시간 데이터는 아닙니다. 장 종료 후에 업데이트되는 데이터라
# TODO: 매일 신규 데이터만 더 긁어오도록 개발하면 될 것 같네요.
#
# Yahoo public API가 존재하지만 인당 횟수 제한이 굉장히 작기 때문에,
# proxy 등의 사용을 위해 yfinance를 사용.
# yfinance는 일종의 우회 툴. github 들어가보면 사용에 주의하라고 나와있음.
# https://github.com/ranaroussi/yfinance
#
# 아래 main을 실행하면 모든 종목의 모든 날짜 주가 데이터를 가져올 수 있다.
# 종목 당 압축 전 300KB, 총 2507개이므로 압축 전 800MB로 예상됨.
# gzip 압축 저장 시, 약 1/3로 줄어, 250MB 예상됨.
#
# required : /base/cbd/{TARGET_DATE}/stock-code.pq.gz (generated by cbd.py)
# ========================================================================================

import pandas as pd
import pandas_datareader as pdr
from pandas_datareader import data as pdr
import time
import yfinance as yf
from util import pysys

DATA_PATH = '/data'
TARGET_DATE = time.strftime('%Y%m%d')
_CBD_PATH = f'{DATA_PATH}/base/cbd/{TARGET_DATE}'
CBD_STOCK_CODE = f'{_CBD_PATH}/stock-code.pq.gz'
STOCK_PATH = f'{DATA_PATH}/base/stock/{TARGET_DATE}'
# ts = time.strftime('%Y%m%d%H%M%S')
yf.pdr_override()


def get_and_save_stock_data_yahoo(stock_code, debug=False):
    if debug == True:
        print(f'processing stock: {stock_code}')
    df = pdr.get_data_yahoo(stock_code)
    df.to_parquet(
        f'{STOCK_PATH}/{stock_code}.pq.gz', compression='gzip')


def test():
    pysys.clean(STOCK_PATH)
    pysys.mkdir(STOCK_PATH)
    code_df = pd.read_parquet(CBD_STOCK_CODE)
    code_df.set_index('name', drop=True, inplace=True)
    get_and_save_stock_data_yahoo(code_df.loc['삼성전자', 'code'], True)
    get_and_save_stock_data_yahoo('011420.KS', True)
    print('test done')


def main():
    print(f"fts.py starts : {time.strftime('%Y%m%d%H%M%S')}")
    pysys.clean(STOCK_PATH)
    pysys.mkdir(STOCK_PATH)
    code_df = pd.read_parquet(CBD_STOCK_CODE)
    tot = len(code_df)
    cnt = 1
    for data in code_df.itertuples():
        print(f'processing {cnt}/{tot}: {data[1]}')
        get_and_save_stock_data_yahoo(data[2])
        cnt+=1
    print(f"fts.py ends : {time.strftime('%Y%m%d%H%M%S')}")


if __name__ == '__main__':
    # test()
    main()
